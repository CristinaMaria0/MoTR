ggplot(aes(y = sent_rg_id, x = estimate_mean, color = sent_rg_id)) +
geom_vline(xintercept = 0, color = "black", linetype="dashed") +
geom_point(position = position_dodge(width = 0.8), size = 2) +
geom_errorbar(aes(xmin = lower_95_ms, xmax = upper_95_ms), width = 0, position = position_dodge(width = 0.8)) +
facet_grid(mm_label ~ experiment, scales = "free_x") +
#scale_colour_manual(values = c("#22455b", "#35698c", "#458ab7", "#59b0ea")) +
scale_colour_manual(values = c("#8e8e8e", "#0015fc", "#727eff", "#bdc2fc")) +
#scale_fill_gradient(low = "green", high="blue") +
labs(color = "Sentence Region") +
xlab("Estimate Mean (of High Attachment / No-Comma)") +
theme(
legend.position = "bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 0),
axis.title.y = element_blank(),
strip.text.x = element_blank(),
strip.background.y = element_rect(fill = "white")
)
#ggsave(paste0("../visualizations/model_estimates", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height =5)
library(viridis)
estimate_plotting_df = stats_df_bayesian %>%
mutate(measure = factor(measure, levels = c("MoTR", "Eye Tracking", "A-Maze", "G-Maze", "SPR"))) %>%
mutate(metric = factor(metric, levels = c("first_duration", "gaze_duration", "go_past_time", "total_duration", "FPReg"),
labels = c("First Duration", "Gaze Duration", "Go Past Time", "Total Duration", "Regression Prob"))) %>%
mutate(mm_label = if_else(measure == "MoTR", paste0("(",metric,")"), "")) %>%
mutate(mm_label = paste(measure, mm_label)) %>%
mutate(mm_label = factor(mm_label, levels = c("MoTR (Gaze Duration)", "MoTR (Go Past Time)", "MoTR (Total Duration)", "MoTR (Regression Prob)", "SPR ", "G-Maze ", "A-Maze "))) %>%
mutate(sent_rg_id = factor(sent_rg_id, levels = c("-1", "0", "1", "2"),
labels = c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")))
estimate_plotting_df %>%
filter(mm_label != "MoTR (Regression Prob)") %>%
ggplot(aes(y = sent_rg_id, x = estimate_mean, color = sent_rg_id)) +
geom_vline(xintercept = 0, color = "black", linetype="dashed") +
geom_point(position = position_dodge(width = 0.8), size = 2) +
geom_errorbar(aes(xmin = lower_95_ms, xmax = upper_95_ms), width = 0, position = position_dodge(width = 0.8)) +
facet_grid(mm_label ~ experiment, scales = "free_x") +
#scale_colour_manual(values = c("#22455b", "#35698c", "#458ab7", "#59b0ea")) +
scale_colour_manual(values = c("#8e8e8e", "#0015fc", "#727eff", "#b3b9fc")) +
#scale_fill_gradient(low = "green", high="blue") +
labs(color = "Sentence Region") +
xlab("Estimate Mean (of High Attachment / No-Comma)") +
theme(
legend.position = "bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 0),
axis.title.y = element_blank(),
strip.text.x = element_blank(),
strip.background.y = element_rect(fill = "white")
)
#ggsave(paste0("../visualizations/model_estimates", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height =5)
library(viridis)
estimate_plotting_df = stats_df_bayesian %>%
mutate(measure = factor(measure, levels = c("MoTR", "Eye Tracking", "A-Maze", "G-Maze", "SPR"))) %>%
mutate(metric = factor(metric, levels = c("first_duration", "gaze_duration", "go_past_time", "total_duration", "FPReg"),
labels = c("First Duration", "Gaze Duration", "Go Past Time", "Total Duration", "Regression Prob"))) %>%
mutate(mm_label = if_else(measure == "MoTR", paste0("(",metric,")"), "")) %>%
mutate(mm_label = paste(measure, mm_label)) %>%
mutate(mm_label = factor(mm_label, levels = c("MoTR (Gaze Duration)", "MoTR (Go Past Time)", "MoTR (Total Duration)", "MoTR (Regression Prob)", "SPR ", "G-Maze ", "A-Maze "))) %>%
mutate(sent_rg_id = factor(sent_rg_id, levels = c("-1", "0", "1", "2"),
labels = c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")))
estimate_plotting_df %>%
filter(mm_label != "MoTR (Regression Prob)") %>%
ggplot(aes(y = sent_rg_id, x = estimate_mean, color = sent_rg_id)) +
geom_vline(xintercept = 0, color = "green", linetype="dashed") +
geom_point(position = position_dodge(width = 0.8), size = 2) +
geom_errorbar(aes(xmin = lower_95_ms, xmax = upper_95_ms), width = 0, position = position_dodge(width = 0.8)) +
facet_grid(mm_label ~ experiment, scales = "free_x") +
#scale_colour_manual(values = c("#22455b", "#35698c", "#458ab7", "#59b0ea")) +
scale_colour_manual(values = c("#8e8e8e", "#0015fc", "#727eff", "#b3b9fc")) +
#scale_fill_gradient(low = "green", high="blue") +
labs(color = "Sentence Region") +
xlab("Estimate Mean (of High Attachment / No-Comma)") +
theme(
legend.position = "bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 0),
axis.title.y = element_blank(),
strip.text.x = element_blank(),
strip.background.y = element_rect(fill = "white")
)
#ggsave(paste0("../visualizations/model_estimates", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height =5)
library(viridis)
estimate_plotting_df = stats_df_bayesian %>%
mutate(measure = factor(measure, levels = c("MoTR", "Eye Tracking", "A-Maze", "G-Maze", "SPR"))) %>%
mutate(metric = factor(metric, levels = c("first_duration", "gaze_duration", "go_past_time", "total_duration", "FPReg"),
labels = c("First Duration", "Gaze Duration", "Go Past Time", "Total Duration", "Regression Prob"))) %>%
mutate(mm_label = if_else(measure == "MoTR", paste0("(",metric,")"), "")) %>%
mutate(mm_label = paste(measure, mm_label)) %>%
mutate(mm_label = factor(mm_label, levels = c("MoTR (Gaze Duration)", "MoTR (Go Past Time)", "MoTR (Total Duration)", "MoTR (Regression Prob)", "SPR ", "G-Maze ", "A-Maze "))) %>%
mutate(sent_rg_id = factor(sent_rg_id, levels = c("-1", "0", "1", "2"),
labels = c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")))
estimate_plotting_df %>%
filter(mm_label != "MoTR (Regression Prob)") %>%
ggplot(aes(y = sent_rg_id, x = estimate_mean, color = sent_rg_id)) +
geom_vline(xintercept = 0, color = "red", linetype="dashed") +
geom_point(position = position_dodge(width = 0.8), size = 2) +
geom_errorbar(aes(xmin = lower_95_ms, xmax = upper_95_ms), width = 0, position = position_dodge(width = 0.8)) +
facet_grid(mm_label ~ experiment, scales = "free_x") +
#scale_colour_manual(values = c("#22455b", "#35698c", "#458ab7", "#59b0ea")) +
scale_colour_manual(values = c("#8e8e8e", "#0015fc", "#727eff", "#b3b9fc")) +
#scale_fill_gradient(low = "green", high="blue") +
labs(color = "Sentence Region") +
xlab("Estimate Mean (of High Attachment / No-Comma)") +
theme(
legend.position = "bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 0),
axis.title.y = element_blank(),
strip.text.x = element_blank(),
strip.background.y = element_rect(fill = "white")
)
#ggsave(paste0("../visualizations/model_estimates", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height =5)
library(viridis)
estimate_plotting_df = stats_df_bayesian %>%
mutate(measure = factor(measure, levels = c("MoTR", "Eye Tracking", "A-Maze", "G-Maze", "SPR"))) %>%
mutate(metric = factor(metric, levels = c("first_duration", "gaze_duration", "go_past_time", "total_duration", "FPReg"),
labels = c("First Duration", "Gaze Duration", "Go Past Time", "Total Duration", "Regression Prob"))) %>%
mutate(mm_label = if_else(measure == "MoTR", paste0("(",metric,")"), "")) %>%
mutate(mm_label = paste(measure, mm_label)) %>%
mutate(mm_label = factor(mm_label, levels = c("MoTR (Gaze Duration)", "MoTR (Go Past Time)", "MoTR (Total Duration)", "MoTR (Regression Prob)", "SPR ", "G-Maze ", "A-Maze "))) %>%
mutate(sent_rg_id = factor(sent_rg_id, levels = c("-1", "0", "1", "2"),
labels = c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")))
estimate_plotting_df %>%
filter(mm_label != "MoTR (Regression Prob)") %>%
ggplot(aes(y = sent_rg_id, x = estimate_mean, color = sent_rg_id)) +
geom_vline(xintercept = 0, color = "red", linetype="dashed") +
geom_point(position = position_dodge(width = 0.8), size = 2) +
geom_errorbar(aes(xmin = lower_95_ms, xmax = upper_95_ms), width = 0, position = position_dodge(width = 0.8)) +
facet_grid(mm_label ~ experiment, scales = "free_x") +
#scale_colour_manual(values = c("#22455b", "#35698c", "#458ab7", "#59b0ea")) +
scale_colour_manual(values = c("#8e8e8e", "#0015fc", "#727eff", "#b3b9fc")) +
#scale_fill_gradient(low = "green", high="blue") +
labs(color = "Sentence Region") +
xlab("Estimate Mean (of High Attachment / No-Comma)") +
theme(
legend.position = "bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 0),
axis.title.y = element_blank(),
strip.text.x = element_blank(),
strip.background.y = element_rect(fill = "white")
)
ggsave(paste0("../visualizations/model_estimates", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height =5)
library(viridis)
estimate_plotting_df = stats_df_bayesian %>%
mutate(measure = factor(measure, levels = c("MoTR", "Eye Tracking", "A-Maze", "G-Maze", "SPR"))) %>%
mutate(metric = factor(metric, levels = c("first_duration", "gaze_duration", "go_past_time", "total_duration", "FPReg"),
labels = c("First Duration", "Gaze Duration", "Go Past Time", "Total Duration", "Regression Prob"))) %>%
mutate(mm_label = if_else(measure == "MoTR", paste0("(",metric,")"), "")) %>%
mutate(mm_label = paste(measure, mm_label)) %>%
mutate(mm_label = factor(mm_label, levels = c("MoTR (Gaze Duration)", "MoTR (Go Past Time)", "MoTR (Total Duration)", "MoTR (Regression Prob)", "SPR ", "G-Maze ", "A-Maze "))) %>%
mutate(sent_rg_id = factor(sent_rg_id, levels = c("-1", "0", "1", "2"),
labels = c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")))
estimate_plotting_df %>%
filter(mm_label != "MoTR (Regression Prob)") %>%
ggplot(aes(y = sent_rg_id, x = estimate_mean, color = sent_rg_id)) +
geom_vline(xintercept = 0, color = "red", linetype="dashed") +
geom_point(position = position_dodge(width = 0.8), size = 2) +
geom_errorbar(aes(xmin = lower_95_ms, xmax = upper_95_ms), width = 0, position = position_dodge(width = 0.8)) +
facet_grid(mm_label ~ experiment, scales = "free_x") +
#scale_colour_manual(values = c("#22455b", "#35698c", "#458ab7", "#59b0ea")) +
scale_colour_manual(values = c("#8e8e8e", "#0015fc", "#727eff", "#b3b9fc")) +
#scale_fill_gradient(low = "green", high="blue") +
labs(color = "Sentence Region") +
xlab("Estimate Mean (of High Attachment / No-Comma)") +
theme(
legend.position = "bottom",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 0),
axis.title.y = element_blank(),
strip.text.x = element_blank(),
strip.background.y = element_rect(fill = "white")
)
ggsave(paste0("../visualizations/model_estimates.pdf"), device="pdf", width = 8, height =5)
estimate_plotting_df %>%
filter(mm_label == "MoTR (Regression Prob)") %>%
ggplot(aes(y = sent_rg_id, x = estimate_mean, color = sent_rg_id)) +
geom_vline(xintercept = 0, color = "red", linetype="dashed") +
geom_point(position = position_dodge(width = 0.8)) +
geom_errorbar(aes(xmin = lower_95_ms, xmax = upper_95_ms), width = 0, position = position_dodge(width = 0.8)) +
facet_grid(mm_label ~ experiment, scales = "free_x") +
scale_colour_manual(values = c("#22455b", "#35698c", "#458ab7", "#59b0ea")) +
scale_colour_manual(values = c("#8e8e8e", "#0015fc", "#727eff", "#b3b9fc")) +
#scale_fill_gradient(low = "green", high="blue") +
labs(color = "Sentence Region") +
xlab("Estimate Mean (of High Attachment / No-Comma)") +
theme(
legend.position = "none",
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
strip.text.y = element_text(angle = 0),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
strip.background.y = element_rect(fill = "white")
)
ggsave(paste0("../visualizations/model_estimates_regression.pdf"), device="pdf", width = 8, height =1.2)
# A-Maze Data
amaze_clean_df = amaze_df %>%
rename(condition = type, item_id = group, word_nr = word_num, value = rt, subj = subject) %>%
dplyr::select(condition, item_id, word_nr, value, subj, word) %>%
merge(region_reference_df, by = c("item_id", "word", "word_nr")) %>%
filter(! condition %in% c("filler", "practice")) %>%
drop_na() %>%
mutate(outlier = value > (mean(value) + 3 * sd(value))) %>%
filter(outlier == F) %>%
mutate(experiment = case_when(
condition %in% c("adverb_high", "adverb_low") ~ "Adverb",
condition %in% c("and_comma", "and_no_comma") ~ "Coordination",
condition %in% c("relative_high", "relative_low") ~ "Relative Clause")
) %>%
mutate(condition = case_when(
condition %in% c("adverb_high", "relative_high", "and_no_comma") ~ "high",
condition %in% c("adverb_low", "relative_low", "and_comma") ~ "low")
) %>%
drop_na() %>%
group_by(subj, item_id, condition, sent_rg_id, experiment) %>%
summarise(value = mean(value)) %>%
ungroup()%>%
mutate(measure = "A-Maze",
metric = "go_past_time")
amaze_agg_df = amaze_clean_df %>%
group_by(item_id, condition, sent_rg_id, experiment, metric, measure) %>%
summarise(value = mean(value)) %>%
ungroup()%>%
spread(condition, value) %>%
mutate(diff = high -low) %>%
group_by(sent_rg_id, experiment, measure, metric) %>%
summarise(m = mean(diff),
sd = std.error(diff),
lower = m - 1.96 * sd,
upper = m + 1.96 * sd) %>%
ungroup()
# Combine the MoTR, Eye Tracking, Maze and SPR data into a single dataframe!
comb_agg_df = rbind(motr_agg_df, eyetr_agg_df, gmaze_agg_df, spr_agg_df, amaze_agg_df)
comb_clean_df = rbind(motr_clean_df, gmaze_clean_df, spr_clean_df, amaze_clean_df)
comb_clean_df %>%
filter(measure == "MoTR", metric == "FPReg") %>%
filter(metric >= 0) %>%
summarise(m = mean(value))
#View(comb_agg_df)
#View(comb_clean_df)
stats_df_bayesian <- read.csv("../visualizations/stats_bayesian_2024_feb22_expo.csv")%>%
dplyr::select(-estimate, -lower_95, -upper_95, -std_error) %>%
rename(estimate_mean = mean)
plotting_df = merge(comb_agg_df, stats_df_bayesian, all=T, by = c("sent_rg_id", "metric", "experiment", "measure")) %>%
mutate(sig = if_else(measure != "Eye Tracking" & (upper_95_ms < 0 | lower_95_ms > 0), T, F)) %>%
mutate(cris = if_else(measure != "Eye Tracking" & sig == T, paste0("[",round(lower_95_ms, 0), ", ",round(upper_95_ms, 0),"]"), "")) %>%
mutate(cris = if_else(measure != "Eye Tracking" & sig  == T & metric=="FPReg", paste0("[",round(lower_95_ms, 2), ",\n  ",round(upper_95_ms, 2),"]"), cris)) %>%
mutate(measure = factor(measure, levels = c("MoTR", "Eye Tracking", "A-Maze", "G-Maze", "SPR"))) %>%
mutate(metric = factor(metric, levels = c("first_duration", "gaze_duration", "go_past_time", "total_duration", "FPReg"),
labels = c("First Duration", "Gaze Duration", "Go Past Time", "Total Duration", "Regression Prob"))) %>%
filter(metric != "First Duration")
plotting_df
# This bit is just used for printing out the stats so they can be copied into the latex text in overleaf.
# I change the parameters to just print out different things.
stats_df_bayesian %>%
mutate(estimate_mean = round(estimate_mean, digits=2),
lower_95_ms = round(lower_95_ms, digits=2),
upper_95_ms = round(upper_95_ms, digits=2)) %>%
filter(measure == "A-Maze") %>%
filter(experiment == "Coordination") %>%
filter(sent_rg_id == 0)
# COMPARISON BETWEEN ALL MEASURES
plotting_df %>%
group_by(experiment) %>%
mutate(pval_y = max(upper)) %>%
ungroup() %>%
filter(metric == "Go Past Time") %>%
filter(measure != "Eye Tracking") %>%
ggplot(aes(x = sent_rg_id, y = m, color = measure)) +
geom_hline(yintercept = 0, color = "blue") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.1) +
geom_line() +
geom_text(aes(label = cris, y = pval_y + 60), color = "black", size = 1.8) +
geom_text(aes(x = 0, y = pval_y + 100, label=""), show.legend = FALSE) +
coord_cartesian(xlim = c(-1.25, 2.25), ylim = c(NA, 700)) +
ylab("Difference in RTs (ms) Between Conditions") +
xlab("Sentence Region") +
scale_x_continuous(breaks = c(-1, 0, 1, 2), labels= c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")) +
labs(color = "", linetype = "") +
facet_grid(experiment~measure, scales = "free_y") +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor = element_blank()
)
#ggsave(paste0("../visualizations/target_comp_cris", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height = 4.5)
# G-Maze Data
gmaze_clean_df = gmaze_df %>%
rename(condition = type, item_id = group, word_nr = word_num, value = rt, subj = subject) %>%
dplyr::select(condition, item_id, word_nr, value, subj, word) %>%
merge(region_reference_df, by = c("item_id", "word", "word_nr")) %>%
filter(! condition %in% c("filler", "practice")) %>%
drop_na() %>%
mutate(outlier = value > (mean(value) + 3 * sd(value))) %>%
filter(outlier == F) %>%
mutate(experiment = case_when(
condition %in% c("adverb_high", "adverb_low") ~ "Adverb",
condition %in% c("and_comma", "and_no_comma") ~ "Coordination",
condition %in% c("relative_high", "relative_low") ~ "Relative Clause")
) %>%
mutate(condition = case_when(
condition %in% c("adverb_high", "relative_high", "and_no_comma") ~ "high",
condition %in% c("adverb_low", "relative_low", "and_comma") ~ "low")
) %>%
drop_na() %>%
group_by(subj, item_id, condition, sent_rg_id, experiment) %>%
summarise(value = mean(value)) %>%
ungroup() %>%
mutate(measure = "G-Maze",
metric = "go_past_time") %>%
mutate(zero = if_else(value == 0,T, F)) %>%
filter(zero == F) %>%
dplyr::select(-zero)
gmaze_agg_df = gmaze_clean_df %>%
group_by(item_id, condition, sent_rg_id, experiment, metric, measure) %>%
summarise(value = mean(value)) %>%
ungroup() %>%
spread(condition, value) %>%
mutate(diff = high -low) %>%
group_by(sent_rg_id, experiment, measure, metric) %>%
summarise(m = mean(diff),
sd = std.error(diff),
lower = m - 1.96 * sd,
upper = m + 1.96 * sd) %>%
ungroup()
# View(gmaze_clean_df)
# Combine the MoTR, Eye Tracking, Maze and SPR data into a single dataframe!
comb_agg_df = rbind(motr_agg_df, eyetr_agg_df, gmaze_agg_df, spr_agg_df, amaze_agg_df)
comb_clean_df = rbind(motr_clean_df, gmaze_clean_df, spr_clean_df, amaze_clean_df)
comb_clean_df %>%
filter(measure == "MoTR", metric == "FPReg") %>%
filter(metric >= 0) %>%
summarise(m = mean(value))
#View(comb_agg_df)
#View(comb_clean_df)
stats_df_bayesian <- read.csv("../visualizations/stats_bayesian_2024_feb22_expo.csv")%>%
dplyr::select(-estimate, -lower_95, -upper_95, -std_error) %>%
rename(estimate_mean = mean)
plotting_df = merge(comb_agg_df, stats_df_bayesian, all=T, by = c("sent_rg_id", "metric", "experiment", "measure")) %>%
mutate(sig = if_else(measure != "Eye Tracking" & (upper_95_ms < 0 | lower_95_ms > 0), T, F)) %>%
mutate(cris = if_else(measure != "Eye Tracking" & sig == T, paste0("[",round(lower_95_ms, 0), ", ",round(upper_95_ms, 0),"]"), "")) %>%
mutate(cris = if_else(measure != "Eye Tracking" & sig  == T & metric=="FPReg", paste0("[",round(lower_95_ms, 2), ",\n  ",round(upper_95_ms, 2),"]"), cris)) %>%
mutate(measure = factor(measure, levels = c("MoTR", "Eye Tracking", "A-Maze", "G-Maze", "SPR"))) %>%
mutate(metric = factor(metric, levels = c("first_duration", "gaze_duration", "go_past_time", "total_duration", "FPReg"),
labels = c("First Duration", "Gaze Duration", "Go Past Time", "Total Duration", "Regression Prob"))) %>%
filter(metric != "First Duration")
plotting_df
# COMPARISON BETWEEN ALL MEASURES
plotting_df %>%
group_by(experiment) %>%
mutate(pval_y = max(upper)) %>%
ungroup() %>%
filter(metric == "Go Past Time") %>%
filter(measure != "Eye Tracking") %>%
ggplot(aes(x = sent_rg_id, y = m, color = measure)) +
geom_hline(yintercept = 0, color = "blue") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.1) +
geom_line() +
geom_text(aes(label = cris, y = pval_y + 60), color = "black", size = 1.8) +
geom_text(aes(x = 0, y = pval_y + 100, label=""), show.legend = FALSE) +
coord_cartesian(xlim = c(-1.25, 2.25), ylim = c(NA, 700)) +
ylab("Difference in RTs (ms) Between Conditions") +
xlab("Sentence Region") +
scale_x_continuous(breaks = c(-1, 0, 1, 2), labels= c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")) +
labs(color = "", linetype = "") +
facet_grid(experiment~measure, scales = "free_y") +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor = element_blank()
)
#ggsave(paste0("../visualizations/target_comp_cris", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height = 4.5)
plotting_df
# COMPARISON BETWEEN ALL MEASURES
plotting_df %>%
group_by(experiment) %>%
mutate(pval_y = max(upper)) %>%
ungroup() %>%
filter(metric == "Go Past Time") %>%
filter(measure != "Eye Tracking") %>%
ggplot(aes(x = sent_rg_id, y = m, color = measure)) +
geom_hline(yintercept = 0, color = "blue") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.1) +
geom_line() +
geom_text(aes(label = cris, y = upper + 60), color = "black", size = 1.8) +
geom_text(aes(x = 0, y = pval_y + 100, label=""), show.legend = FALSE) +
coord_cartesian(xlim = c(-1.25, 2.25), ylim = c(NA, 700)) +
ylab("Difference in RTs (ms) Between Conditions") +
xlab("Sentence Region") +
scale_x_continuous(breaks = c(-1, 0, 1, 2), labels= c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")) +
labs(color = "", linetype = "") +
facet_grid(experiment~measure, scales = "free_y") +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor = element_blank()
)
#ggsave(paste0("../visualizations/target_comp_cris", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height = 4.5)
# COMPARISON BETWEEN ALL MEASURES
plotting_df %>%
group_by(experiment) %>%
mutate(pval_y = max(upper)) %>%
ungroup() %>%
filter(metric == "Go Past Time") %>%
filter(measure != "Eye Tracking") %>%
ggplot(aes(x = sent_rg_id, y = m, color = measure)) +
geom_hline(yintercept = 0, color = "blue") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.1) +
geom_line() +
geom_text(aes(label = cris, y = upper + 100), color = "black", size = 2.3) +
geom_text(aes(x = 0, y = pval_y + 100, label=""), show.legend = FALSE) +
coord_cartesian(xlim = c(-1.25, 2.25), ylim = c(NA, 700)) +
ylab("Difference in RTs (ms) Between Conditions") +
xlab("Sentence Region") +
scale_x_continuous(breaks = c(-1, 0, 1, 2), labels= c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")) +
labs(color = "", linetype = "") +
facet_grid(experiment~measure, scales = "free_y") +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor = element_blank()
)
#ggsave(paste0("../visualizations/target_comp_cris", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height = 4.5)
# COMPARISON BETWEEN ALL MEASURES
plotting_df %>%
group_by(experiment) %>%
mutate(pval_y = max(upper)) %>%
ungroup() %>%
filter(metric == "Go Past Time") %>%
filter(measure != "Eye Tracking") %>%
ggplot(aes(x = sent_rg_id, y = m, color = measure)) +
geom_hline(yintercept = 0, color = "blue") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.1) +
geom_line() +
geom_text(aes(label = cris, y = upper + 100), color = "black", size = 2.3) +
geom_text(aes(x = 0, y = pval_y + 100, label=""), show.legend = FALSE) +
coord_cartesian(xlim = c(-1.25, 2.3), ylim = c(NA, 700)) +
ylab("Difference in RTs (ms) Between Conditions") +
xlab("Sentence Region") +
scale_x_continuous(breaks = c(-1, 0, 1, 2), labels= c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")) +
labs(color = "", linetype = "") +
facet_grid(experiment~measure, scales = "free_y") +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor = element_blank()
)
ggsave(paste0("../visualizations/target_comp_cris", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height = 4.5)
# COMPARISON BETWEEN ALL MEASURES
plotting_df %>%
group_by(experiment) %>%
mutate(pval_y = max(upper)) %>%
ungroup() %>%
filter(metric == "Go Past Time") %>%
filter(measure != "Eye Tracking") %>%
ggplot(aes(x = sent_rg_id, y = m, color = measure)) +
geom_hline(yintercept = 0, color = "blue") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.1) +
geom_line() +
geom_text(aes(label = cris, y = upper + 100), color = "black", size = 2.3) +
geom_text(aes(x = 0, y = pval_y + 100, label=""), show.legend = FALSE) +
coord_cartesian(xlim = c(-1.25, 2.4), ylim = c(NA, 700)) +
ylab("Difference in RTs (ms) Between Conditions") +
xlab("Sentence Region") +
scale_x_continuous(breaks = c(-1, 0, 1, 2), labels= c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")) +
labs(color = "", linetype = "") +
facet_grid(experiment~measure, scales = "free_y") +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor = element_blank()
)
ggsave(paste0("../visualizations/target_comp_cris", rate, "_2024_feb22.pdf"), device="pdf", width = 8, height = 4.5)
# COMPARISON BETWEEN ALL MEASURES
plotting_df %>%
group_by(experiment) %>%
mutate(pval_y = max(upper)) %>%
ungroup() %>%
filter(metric == "Go Past Time") %>%
filter(measure != "Eye Tracking") %>%
ggplot(aes(x = sent_rg_id, y = m, color = measure)) +
geom_hline(yintercept = 0, color = "blue") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.1) +
geom_line() +
geom_text(aes(label = cris, y = upper + 100), color = "black", size = 2.3) +
geom_text(aes(x = 0, y = pval_y + 100, label=""), show.legend = FALSE) +
coord_cartesian(xlim = c(-1.25, 2.4), ylim = c(NA, 700)) +
ylab("Difference in RTs (ms) Between Conditions") +
xlab("Sentence Region") +
scale_x_continuous(breaks = c(-1, 0, 1, 2), labels= c("Pre-Critical", "Critical", "Critical +1", "Critcal +2")) +
labs(color = "", linetype = "") +
facet_grid(experiment~measure, scales = "free_y") +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.minor = element_blank()
)
ggsave(paste0("../visualizations/target_comp_cris.pdf"), device="pdf", width = 8, height = 4.5)
