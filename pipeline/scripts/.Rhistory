if_else(cond_id == 7, "practice", "filler")))))))) %>%
filter(metric != "FPReg") %>%
filter(cond_id == "and_no_comma" | cond_id == "and_comma") %>%
# filter(! (item_id == 4 & cond_id == "No Comma") ) %>% # just because of alignment issues for now
mutate(crit = if_else(word == "and", word_nr, as.integer(0) )) %>%
group_by(cond_id, item_id) %>%
mutate(crit = unique(crit)[2]) %>%
ungroup() %>%
mutate(word_nr = word_nr - crit)
View(motr_attach_df)
agg_motr_attach_df = motr_attach_df %>%
drop_na() %>%
filter(word_nr >= -2, word_nr < 6) %>%
group_by(cond_id, word_nr, metric) %>%
summarise( m = mean(value),
sd = std.error(value),
upper = m + 1.96 * sd,
lower = m - 1.98 * sd,
n = n()) %>%
ungroup()
View(agg_motr_attach_df)
agg_motr_attach_df %>%
ggplot(aes(x = word_nr, y = m, color = cond_id)) +
geom_rect(aes(xmin = 2.5, xmax = 5.5, ymin = 100, ymax = 800), fill=alpha("white", 0), color = "#45ef70", linetype = "dotted") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.3) +
geom_line() +
#geom_text(aes(label = word, y = if_else(cond_id == "Comma", 3000, 3500)), size = 2) +
#facet_grid(para_nr~cond_id) +
ylab("Reading Time") +
xlab("Condition") +
scale_x_continuous(breaks=-2:5, labels=c("the", "man", "and", "his", "wife", "ran", "away", "from")) +
facet_grid(~metric) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
)
#ggsave("../visualization/attachment.png", device = "png", width = 6, height = 3)
View(motr_df)
View(motr_df)
motr_attach_df = motr_df %>%
filter(expr_id == "Attachment") %>%
rename( item_id = para_nr) %>%
mutate(item_id = as.integer(item_id)) %>%
mutate(cond_id = as.factor(cond_id)) %>%
mutate(cond_id = if_else(cond_id == 1, "and_no_comma",
if_else(cond_id == 2, "and_comma",
if_else(cond_id == 3, "adv_high",
if_else(cond_id == 4, "adv_low",
if_else(cond_id == 5, "relative_high",
if_else(cond_id == 6, "relative_low",
if_else(cond_id == 7, "practice", "filler")))))))) %>%
filter(metric != "FPReg") %>%
filter(cond_id == "and_no_comma" | cond_id == "and_comma") %>%
# filter(! (item_id == 4 & cond_id == "No Comma") ) %>% # just because of alignment issues for now
mutate(crit = if_else(word == "and", word_nr, as.integer(0) )) %>%
group_by(cond_id, item_id) %>%
mutate(crit = unique(crit)[2]) %>%
ungroup() %>%
mutate(word_nr = word_nr - crit)
View(motr_attach_df)
agg_motr_attach_df = motr_attach_df %>%
drop_na() %>%
filter(word_nr >= -2, word_nr < 6) %>%
group_by(cond_id, word_nr, metric) %>%
summarise( m = mean(value),
sd = std.error(value),
upper = m + 1.96 * sd,
lower = m - 1.98 * sd,
n = n()) %>%
ungroup()
View(agg_motr_attach_df)
agg_motr_attach_df %>%
ggplot(aes(x = word_nr, y = m, color = cond_id)) +
geom_rect(aes(xmin = 2.5, xmax = 5.5, ymin = 100, ymax = 800), fill=alpha("white", 0), color = "#45ef70", linetype = "dotted") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.3) +
geom_line() +
#geom_text(aes(label = word, y = if_else(cond_id == "Comma", 3000, 3500)), size = 2) +
#facet_grid(para_nr~cond_id) +
ylab("Reading Time") +
xlab("Condition") +
scale_x_continuous(breaks=-2:5, labels=c("the", "man", "and", "his", "wife", "ran", "away", "from")) +
facet_grid(~metric) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
)
#ggsave("../visualization/attachment.png", device = "png", width = 6, height = 3)
# View(motr_df)
motr_attach_df = motr_df %>%
filter(expr_id == "Attachment") %>%
rename( item_id = para_nr) %>%
mutate(item_id = as.integer(item_id)) %>%
mutate(cond_id = as.factor(cond_id)) %>%
mutate(cond_id = if_else(cond_id == 1, "No Comma",
if_else(cond_id == 2, "Comma",
if_else(cond_id == 3, "adv_high",
if_else(cond_id == 4, "adv_low",
if_else(cond_id == 5, "relative_high",
if_else(cond_id == 6, "relative_low",
if_else(cond_id == 7, "practice", "filler")))))))) %>%
filter(metric != "FPReg") %>%
filter(cond_id == "No Comma" | cond_id == "Comma") %>%
# filter(! (item_id == 4 & cond_id == "No Comma") ) %>% # just because of alignment issues for now
mutate(crit = if_else(word == "and", word_nr, as.integer(0) )) %>%
group_by(cond_id, item_id) %>%
mutate(crit = unique(crit)[2]) %>%
ungroup() %>%
mutate(word_nr = word_nr - crit)
View(motr_attach_df)
agg_motr_attach_df = motr_attach_df %>%
drop_na() %>%
filter(word_nr >= -2, word_nr < 6) %>%
group_by(cond_id, word_nr, metric) %>%
summarise( m = mean(value),
sd = std.error(value),
upper = m + 1.96 * sd,
lower = m - 1.98 * sd,
n = n()) %>%
ungroup()
View(agg_motr_attach_df)
agg_motr_attach_df %>%
ggplot(aes(x = word_nr, y = m, color = cond_id)) +
geom_rect(aes(xmin = 2.5, xmax = 5.5, ymin = 100, ymax = 800), fill=alpha("white", 0), color = "#45ef70", linetype = "dotted") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.3) +
geom_line() +
#geom_text(aes(label = word, y = if_else(cond_id == "Comma", 3000, 3500)), size = 2) +
#facet_grid(para_nr~cond_id) +
ylab("Reading Time") +
xlab("Condition") +
scale_x_continuous(breaks=-2:5, labels=c("the", "man", "and", "his", "wife", "ran", "away", "from")) +
facet_grid(~metric) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
)
#ggsave("../visualization/attachment.png", device = "png", width = 6, height = 3)
options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
# library(jglmm)
# jglmm_setup()
attach_lm_df = motr_attach_df %>%
filter(metric == "gaze_duration") %>%
filter(word_nr == 3) %>%
mutate(item_id = as.factor(item_id),
subj = as.factor(subj))
m = attach_lm_df %>%
lmer(value ~ cond_id + (cond_id | item_id) + (cond_id | subj), data=.)
summary(m)
# `suppressPackageStartupMessages` is a function in R that suppresses the startup messages that are generated when loading a package. It can be useful to prevent the console from being cluttered with messages when you are loading multiple packages or when you don't want to see the package loading messages.
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
# `theme_set(theme_bw())` is a command in R that sets the default theme for all subsequent plots to a theme called `theme_bw()`.
# `theme_bw()` is a built-in theme in the ggplot2 package that provides a classic black-and-white theme with white grid lines. By setting the default theme to `theme_bw()`, all plots that are created using ggplot2 will have this theme unless a different theme is explicitly specified.
theme_set(theme_bw())
# `options(digits=4)` is a command in R that sets the number of digits to display when printing numeric values.
# By default, R will print up to 7 digits for numeric values. However, you can use the `options()` function to change this behavior. In this case, `options(digits=4)` sets the number of digits to 4, which means that all numeric values will be displayed with at most 4 digits.
options(digits=4)
set.seed(444)
# The `pipe_message` function first outputs the status message using the message() function. This can be useful for tracking the progress of a long computation or for providing information to the user.
# After printing the message, the function returns the .data argument unchanged. This allows the function to be used as a "pipe" in a data processing pipeline, where the output of one function is used as the input to the next function.
pipe_message = function(.data, status) {message(status); .data}
# Interesting way of reading multiple files in one directory!
file_prefix = "../reading_measures/cleaned_f160"
fnames = list.files(path=file_prefix)
# fnames: [1] "reader_55_reading_measures.csv" "reader_56_reading_measures.csv"
# [3] "reader_59_reading_measures.csv" "reader_61_reading_measures.csv"
# Read in the data
df = data.frame()
# uses the mutate() function from the dplyr package to create a new column in a data frame called subj. The new column is created by removing the substring _reading_measures.csv from the values in an existing column called f.
for (f in fnames) {
temp = read.csv(paste0(file_prefix, "/", f)) %>%
mutate(subj = str_remove(f, "_reading_measures.csv")) %>%
dplyr::select(expr_id, cond_id, para_nr, word, word_nr, first_duration, total_duration,
gaze_duration, go_pass_time, FPReg, subj) %>%
rename(go_past_time = go_pass_time)
df = rbind(df, temp)
}
df
# `gather will take column 6-9's column name make it rows, name 'metric', take their value as another row`
motr_df = df %>%
mutate(expr_id = if_else(expr_id == 1, "Attachment", "Provo")) %>%
gather(metric, value, 6:10)
motr_df
# Average across subjects
motr_agg_df = motr_df %>%
drop_na() %>%
group_by(expr_id, cond_id, para_nr, word, word_nr, metric) %>%
summarise(value = mean(value)) %>%    # sum up four subjects for each metric and divide by 4.
ungroup() %>%
arrange(expr_id, cond_id, para_nr, word_nr)   # like sort in python
# View(motr_agg_df)
motr_agg_df
table(motr_df$subj)
# reader_55 reader_56 reader_59 reader_61
#    3100      3100      3100      3100
# View(motr_df)
motr_attach_df = motr_df %>%
filter(expr_id == "Attachment") %>%
rename( item_id = para_nr) %>%
mutate(item_id = as.integer(item_id)) %>%
mutate(cond_id = as.factor(cond_id)) %>%
mutate(cond_id = if_else(cond_id == 1, "No Comma",
if_else(cond_id == 2, "Comma",
if_else(cond_id == 3, "adv_high",
if_else(cond_id == 4, "adv_low",
if_else(cond_id == 5, "relative_high",
if_else(cond_id == 6, "relative_low",
if_else(cond_id == 7, "practice", "filler")))))))) %>%
filter(metric != "FPReg") %>%
filter(cond_id == "No Comma" | cond_id == "Comma") %>%
# filter(! (item_id == 4 & cond_id == "No Comma") ) %>% # just because of alignment issues for now
mutate(crit = if_else(word == "and", word_nr, as.integer(0) )) %>%
group_by(cond_id, item_id) %>%
mutate(crit = unique(crit)[2]) %>%
ungroup() %>%
mutate(word_nr = word_nr - crit)
View(motr_attach_df)
agg_motr_attach_df = motr_attach_df %>%
drop_na() %>%
filter(word_nr >= -2, word_nr < 6) %>%
group_by(cond_id, word_nr, metric) %>%
summarise( m = mean(value),
sd = std.error(value),
upper = m + 1.96 * sd,
lower = m - 1.98 * sd,
n = n()) %>%
ungroup()
View(agg_motr_attach_df)
agg_motr_attach_df %>%
ggplot(aes(x = word_nr, y = m, color = cond_id)) +
geom_rect(aes(xmin = 2.5, xmax = 5.5, ymin = 100, ymax = 800), fill=alpha("white", 0), color = "#45ef70", linetype = "dotted") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.3) +
geom_line() +
#geom_text(aes(label = word, y = if_else(cond_id == "Comma", 3000, 3500)), size = 2) +
#facet_grid(para_nr~cond_id) +
ylab("Reading Time") +
xlab("Condition") +
scale_x_continuous(breaks=-2:5, labels=c("the", "man", "and", "his", "wife", "ran", "away", "from")) +
facet_grid(~metric) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
)
#ggsave("../visualization/attachment.png", device = "png", width = 6, height = 3)
options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
# library(jglmm)
# jglmm_setup()
attach_lm_df = motr_attach_df %>%
filter(metric == "gaze_duration") %>%
filter(word_nr == 3) %>%
mutate(item_id = as.factor(item_id),
subj = as.factor(subj))
m = attach_lm_df %>%
lmer(value ~ cond_id + (cond_id | item_id) + (cond_id | subj), data=.)
# `suppressPackageStartupMessages` is a function in R that suppresses the startup messages that are generated when loading a package. It can be useful to prevent the console from being cluttered with messages when you are loading multiple packages or when you don't want to see the package loading messages.
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
# `theme_set(theme_bw())` is a command in R that sets the default theme for all subsequent plots to a theme called `theme_bw()`.
# `theme_bw()` is a built-in theme in the ggplot2 package that provides a classic black-and-white theme with white grid lines. By setting the default theme to `theme_bw()`, all plots that are created using ggplot2 will have this theme unless a different theme is explicitly specified.
theme_set(theme_bw())
# `options(digits=4)` is a command in R that sets the number of digits to display when printing numeric values.
# By default, R will print up to 7 digits for numeric values. However, you can use the `options()` function to change this behavior. In this case, `options(digits=4)` sets the number of digits to 4, which means that all numeric values will be displayed with at most 4 digits.
options(digits=4)
set.seed(444)
# The `pipe_message` function first outputs the status message using the message() function. This can be useful for tracking the progress of a long computation or for providing information to the user.
# After printing the message, the function returns the .data argument unchanged. This allows the function to be used as a "pipe" in a data processing pipeline, where the output of one function is used as the input to the next function.
pipe_message = function(.data, status) {message(status); .data}
# Interesting way of reading multiple files in one directory!
file_prefix = "../reading_measures/cleaned_f160"
fnames = list.files(path=file_prefix)
# fnames: [1] "reader_55_reading_measures.csv" "reader_56_reading_measures.csv"
# [3] "reader_59_reading_measures.csv" "reader_61_reading_measures.csv"
# Read in the data
df = data.frame()
# uses the mutate() function from the dplyr package to create a new column in a data frame called subj. The new column is created by removing the substring _reading_measures.csv from the values in an existing column called f.
for (f in fnames) {
temp = read.csv(paste0(file_prefix, "/", f)) %>%
mutate(subj = str_remove(f, "_reading_measures.csv")) %>%
dplyr::select(expr_id, cond_id, para_nr, word, word_nr, first_duration, total_duration,
gaze_duration, go_pass_time, FPReg, subj) %>%
rename(go_past_time = go_pass_time)
df = rbind(df, temp)
}
df
# `gather will take column 6-9's column name make it rows, name 'metric', take their value as another row`
motr_df = df %>%
mutate(expr_id = if_else(expr_id == 1, "Attachment", "Provo")) %>%
gather(metric, value, 6:10)
motr_df
# Average across subjects
motr_agg_df = motr_df %>%
drop_na() %>%
group_by(expr_id, cond_id, para_nr, word, word_nr, metric) %>%
summarise(value = mean(value)) %>%    # sum up four subjects for each metric and divide by 4.
ungroup() %>%
arrange(expr_id, cond_id, para_nr, word_nr)   # like sort in python
# View(motr_agg_df)
motr_agg_df
table(motr_df$subj)
# reader_55 reader_56 reader_59 reader_61
#    3100      3100      3100      3100
motr_provo_df = motr_agg_df %>%
filter(expr_id == "Provo") %>%
rename(text_id = para_nr,
word_text_idx = word_nr,
motr_value = value) %>%
dplyr::select(-expr_id, -cond_id)
motr_provo_df
# Read in Provo surprisal, frequency and length data
provo_modeling_df = read.csv("../ancillary_data/provo_df.csv") %>%
dplyr::select(text_id, sent_id, trigger_idx, word, freq, surp, len) %>%
rename(word_idx = trigger_idx)
provo_modeling_df
# Read in Provo eyetracking data
provo_raw_df = read.csv("../ancillary_data/provo_eyetracking.csv")
provo_eyetracking_df = provo_raw_df %>%
dplyr::select(Participant_ID, Text_ID, Sentence_Number, Word_In_Sentence_Number, IA_ID, Word,IA_FIRST_FIXATION_DURATION, IA_FIRST_FIX_PROGRESSIVE, IA_FIRST_RUN_DWELL_TIME, IA_DWELL_TIME, IA_REGRESSION_PATH_DURATION, IA_REGRESSION_OUT) %>%
rename( first_duration = IA_FIRST_FIXATION_DURATION,    # whether it is first pass?
gaze_duration = IA_FIRST_RUN_DWELL_TIME,
total_duration = IA_DWELL_TIME,
go_past_time = IA_REGRESSION_PATH_DURATION,
FPReg = IA_REGRESSION_OUT,
subj = Participant_ID,
text_id = Text_ID,
sent_id = Sentence_Number,
word_idx = Word_In_Sentence_Number,
word_text_idx = IA_ID,
word = Word,
ff_progressive = IA_FIRST_FIX_PROGRESSIVE) %>% # notice:average across subj, binary(0,1) becomes float.
mutate(gaze_duration = ifelse(ff_progressive == 0, 0, gaze_duration),
go_past_time = ifelse(ff_progressive == 0, 0, go_past_time)) %>%
dplyr::select(-ff_progressive) %>%
gather(metric, value, 7:11) %>%      # not include FFReg which is in column 11
mutate(value = if_else(is.na(value), as.integer(0), as.integer(value))) %>%
drop_na() %>%   # actually, drop first word in a sentence
group_by(text_id, word_text_idx, sent_id, word_idx, word, metric) %>%
summarise(value = mean(value)) %>%
ungroup()
# View(provo_eyetracking_df)
provo_eyetracking_df
provo_df = merge(provo_eyetracking_df, provo_modeling_df, by=c("text_id", "sent_id", "word_idx")) %>%
mutate(word_text_idx = as.integer(word_text_idx - 1)) %>%
arrange(text_id, sent_id, word_idx)
provo_df
provo_df = merge(provo_df, motr_provo_df, by=c("text_id", "word_text_idx", "metric")) %>%
rename(eyetr_value = value) %>%
arrange(text_id, sent_id, word_idx) %>%
filter(word.x == word) %>%      #word.y has no captical word
dplyr::select(-word.x, -word.y) %>%
mutate(motr_outlier = if_else(motr_value > (mean(motr_value) + 3 * sd(motr_value) ), T, F)) %>%
filter(motr_outlier == F) %>%     # clear outlier -> 13 was filtered.
gather(measure, value, c("eyetr_value", "motr_value"))  %>%
# filter(metric != "first_duration") %>%
filter(metric != "FPReg")
# View(provo_df)
provo_df %>%
ggplot(aes(x = value, color=metric)) +
geom_density() +
facet_wrap(.~measure) +
xlab("Reading Measure")
# View(motr_df)
motr_attach_df = motr_df %>%
filter(expr_id == "Attachment") %>%
rename( item_id = para_nr) %>%
mutate(item_id = as.integer(item_id)) %>%
mutate(cond_id = as.factor(cond_id)) %>%
mutate(cond_id = if_else(cond_id == 1, "No Comma",
if_else(cond_id == 2, "Comma",
if_else(cond_id == 3, "adv_high",
if_else(cond_id == 4, "adv_low",
if_else(cond_id == 5, "relative_high",
if_else(cond_id == 6, "relative_low",
if_else(cond_id == 7, "practice", "filler")))))))) %>%
filter(metric != "FPReg") %>%
filter(cond_id == "No Comma" | cond_id == "Comma") %>%
# filter(! (item_id == 4 & cond_id == "No Comma") ) %>% # just because of alignment issues for now
mutate(crit = if_else(word == "and", word_nr, as.integer(0) )) %>%
group_by(cond_id, item_id) %>%
mutate(crit = unique(crit)[2]) %>%
ungroup() %>%
mutate(word_nr = word_nr - crit)
View(motr_attach_df)
agg_motr_attach_df = motr_attach_df %>%
drop_na() %>%
filter(word_nr >= -2, word_nr < 6) %>%
group_by(cond_id, word_nr, metric) %>%
summarise( m = mean(value),
sd = std.error(value),
upper = m + 1.96 * sd,
lower = m - 1.98 * sd,
n = n()) %>%
ungroup()
View(agg_motr_attach_df)
agg_motr_attach_df %>%
ggplot(aes(x = word_nr, y = m, color = cond_id)) +
geom_rect(aes(xmin = 2.5, xmax = 5.5, ymin = 100, ymax = 800), fill=alpha("white", 0), color = "#45ef70", linetype = "dotted") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.3) +
geom_line() +
#geom_text(aes(label = word, y = if_else(cond_id == "Comma", 3000, 3500)), size = 2) +
#facet_grid(para_nr~cond_id) +
ylab("Reading Time") +
xlab("Condition") +
scale_x_continuous(breaks=-2:5, labels=c("the", "man", "and", "his", "wife", "ran", "away", "from")) +
facet_grid(~metric) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
)
#ggsave("../visualization/attachment.png", device = "png", width = 6, height = 3)
options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
# library(jglmm)
# jglmm_setup()
attach_lm_df = motr_attach_df %>%
filter(metric == "gaze_duration") %>%
filter(word_nr == 3) %>%
mutate(item_id = as.factor(item_id),
subj = as.factor(subj))
m = attach_lm_df %>%
lmer(value ~ cond_id + (cond_id | item_id) + (cond_id | subj), data=.)
summary(m)
# View(motr_df)
motr_attach_df = motr_df %>%
filter(expr_id == "Attachment") %>%
rename( item_id = para_nr) %>%
mutate(item_id = as.integer(item_id)) %>%
mutate(cond_id = as.factor(cond_id)) %>%
mutate(cond_id = if_else(cond_id == 1, "No Comma",
if_else(cond_id == 2, "Comma",
if_else(cond_id == 3, "adv_high",
if_else(cond_id == 4, "adv_low",
if_else(cond_id == 5, "relative_high",
if_else(cond_id == 6, "relative_low",
if_else(cond_id == 7, "practice", "filler")))))))) %>%
filter(metric != "FPReg") %>%
filter(cond_id == "relative_high" | cond_id == "relative_low") %>%
# filter(! (item_id == 4 & cond_id == "No Comma") ) %>% # just because of alignment issues for now
mutate(crit = if_else(word == "who", word_nr, as.integer(0) )) %>%
group_by(cond_id, item_id) %>%
mutate(crit = unique(crit)[2]) %>%
ungroup() %>%
mutate(word_nr = word_nr - crit)
View(motr_attach_df)
agg_motr_attach_df = motr_attach_df %>%
drop_na() %>%
filter(word_nr >= -2, word_nr < 6) %>%
group_by(cond_id, word_nr, metric) %>%
summarise( m = mean(value),
sd = std.error(value),
upper = m + 1.96 * sd,
lower = m - 1.98 * sd,
n = n()) %>%
ungroup()
View(agg_motr_attach_df)
agg_motr_attach_df %>%
ggplot(aes(x = word_nr, y = m, color = cond_id)) +
geom_rect(aes(xmin = 2.5, xmax = 5.5, ymin = 100, ymax = 800), fill=alpha("white", 0), color = "#45ef70", linetype = "dotted") +
geom_point() +
geom_errorbar(aes(ymax = upper, ymin = lower), width = 0.3) +
geom_line() +
#geom_text(aes(label = word, y = if_else(cond_id == "Comma", 3000, 3500)), size = 2) +
#facet_grid(para_nr~cond_id) +
ylab("Reading Time") +
xlab("Condition") +
# scale_x_continuous(breaks=-2:5, labels=c("the", "man", "and", "his", "wife", "ran", "away", "from")) +
scale_x_continuous(breaks=-2:5, labels=c('the', 'queen', 'who', 'praised', 'herself', 'all', 'the', 'time')) +
facet_grid(~metric) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
)
#ggsave("../visualization/attachment.png", device = "png", width = 6, height = 3)
options(JULIA_HOME = "/Applications/Julia-1.8.app/Contents/Resources/julia/bin/")
# library(jglmm)
# jglmm_setup()
attach_lm_df = motr_attach_df %>%
filter(metric == "gaze_duration") %>%
filter(word_nr == 3) %>%
mutate(item_id = as.factor(item_id),
subj = as.factor(subj))
m = attach_lm_df %>%
lmer(value ~ cond_id + (cond_id | item_id) + (cond_id | subj), data=.)
summary(m)
